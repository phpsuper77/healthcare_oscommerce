<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'EbatNs_ComplexType.php';
require_once 'ValType.php';
require_once 'SortOrderCodeType.php';
require_once 'LabelType.php';

class CharacteristicType extends EbatNs_ComplexType
{
	// start props
	// @var int $AttributeID
	var $AttributeID;
	// @var string $DateFormat
	var $DateFormat;
	// @var string $DisplaySequence
	var $DisplaySequence;
	// @var string $DisplayUOM
	var $DisplayUOM;
	// @var LabelType $Label
	var $Label;
	// @var SortOrderCodeType $SortOrder
	var $SortOrder;
	// @var ValType $ValueList
	var $ValueList;
	// end props

/**
 *

 * @return int
 */
	function getAttributeID()
	{
		return $this->AttributeID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setAttributeID($value)
	{
		$this->AttributeID = $value;
	}
/**
 *

 * @return string
 */
	function getDateFormat()
	{
		return $this->DateFormat;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDateFormat($value)
	{
		$this->DateFormat = $value;
	}
/**
 *

 * @return string
 */
	function getDisplaySequence()
	{
		return $this->DisplaySequence;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDisplaySequence($value)
	{
		$this->DisplaySequence = $value;
	}
/**
 *

 * @return string
 */
	function getDisplayUOM()
	{
		return $this->DisplayUOM;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDisplayUOM($value)
	{
		$this->DisplayUOM = $value;
	}
/**
 *

 * @return LabelType
 */
	function getLabel()
	{
		return $this->Label;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLabel($value)
	{
		$this->Label = $value;
	}
/**
 *

 * @return SortOrderCodeType
 */
	function getSortOrder()
	{
		return $this->SortOrder;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSortOrder($value)
	{
		$this->SortOrder = $value;
	}
/**
 *

 * @return ValType
 * @param  $index 
 */
	function getValueList($index = null)
	{
		if ($index) {
		return $this->ValueList[$index];
	} else {
		return $this->ValueList;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setValueList($value, $index = null)
	{
		if ($index) {
	$this->ValueList[$index] = $value;
	} else {
	$this->ValueList = $value;
	}

	}
/**
 *

 * @return 
 */
	function CharacteristicType()
	{
		$this->EbatNs_ComplexType('CharacteristicType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'AttributeID' =>
				array(
					'required' => true,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '1..1'
				),
				'DateFormat' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DisplaySequence' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DisplayUOM' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Label' =>
				array(
					'required' => false,
					'type' => 'LabelType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SortOrder' =>
				array(
					'required' => false,
					'type' => 'SortOrderCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ValueList' =>
				array(
					'required' => false,
					'type' => 'ValType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				)
			));

	}
}
?>
