<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'CategoryItemSpecificsType.php';
require_once 'AbstractRequestType.php';

class GetCategorySpecificsRequestType extends AbstractRequestType
{
	// start props
	// @var string $CategoryID
	var $CategoryID;
	// @var dateTime $LastUpdateTime
	var $LastUpdateTime;
	// @var int $MaxNames
	var $MaxNames;
	// @var int $MaxValuesPerName
	var $MaxValuesPerName;
	// @var string $Name
	var $Name;
	// @var CategoryItemSpecificsType $CategorySpecific
	var $CategorySpecific;
	// @var boolean $ExcludeRelationships
	var $ExcludeRelationships;
	// @var boolean $IncludeConfidence
	var $IncludeConfidence;
	// @var boolean $CategorySpecificsFileInfo
	var $CategorySpecificsFileInfo;
	// end props

/**
 *

 * @return string
 * @param  $index 
 */
	function getCategoryID($index = null)
	{
		if ($index) {
		return $this->CategoryID[$index];
	} else {
		return $this->CategoryID;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setCategoryID($value, $index = null)
	{
		if ($index) {
	$this->CategoryID[$index] = $value;
	} else {
	$this->CategoryID = $value;
	}

	}
/**
 *

 * @return dateTime
 */
	function getLastUpdateTime()
	{
		return $this->LastUpdateTime;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLastUpdateTime($value)
	{
		$this->LastUpdateTime = $value;
	}
/**
 *

 * @return int
 */
	function getMaxNames()
	{
		return $this->MaxNames;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMaxNames($value)
	{
		$this->MaxNames = $value;
	}
/**
 *

 * @return int
 */
	function getMaxValuesPerName()
	{
		return $this->MaxValuesPerName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMaxValuesPerName($value)
	{
		$this->MaxValuesPerName = $value;
	}
/**
 *

 * @return string
 */
	function getName()
	{
		return $this->Name;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setName($value)
	{
		$this->Name = $value;
	}
/**
 *

 * @return CategoryItemSpecificsType
 * @param  $index 
 */
	function getCategorySpecific($index = null)
	{
		if ($index) {
		return $this->CategorySpecific[$index];
	} else {
		return $this->CategorySpecific;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setCategorySpecific($value, $index = null)
	{
		if ($index) {
	$this->CategorySpecific[$index] = $value;
	} else {
	$this->CategorySpecific = $value;
	}

	}
/**
 *

 * @return boolean
 */
	function getExcludeRelationships()
	{
		return $this->ExcludeRelationships;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setExcludeRelationships($value)
	{
		$this->ExcludeRelationships = $value;
	}
/**
 *

 * @return boolean
 */
	function getIncludeConfidence()
	{
		return $this->IncludeConfidence;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setIncludeConfidence($value)
	{
		$this->IncludeConfidence = $value;
	}
/**
 *

 * @return boolean
 */
	function getCategorySpecificsFileInfo()
	{
		return $this->CategorySpecificsFileInfo;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCategorySpecificsFileInfo($value)
	{
		$this->CategorySpecificsFileInfo = $value;
	}
/**
 *

 * @return 
 */
	function GetCategorySpecificsRequestType()
	{
		$this->AbstractRequestType('GetCategorySpecificsRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'CategoryID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				),
				'LastUpdateTime' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxNames' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxValuesPerName' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Name' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CategorySpecific' =>
				array(
					'required' => false,
					'type' => 'CategoryItemSpecificsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ExcludeRelationships' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'IncludeConfidence' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CategorySpecificsFileInfo' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
