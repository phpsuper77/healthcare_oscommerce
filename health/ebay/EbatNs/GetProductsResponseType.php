<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'ItemArrayType.php';
require_once 'BuyingGuideDetailsType.php';
require_once 'CharacteristicsSetProductHistogramType.php';
require_once 'AbstractResponseType.php';
require_once 'CatalogProductType.php';

class GetProductsResponseType extends AbstractResponseType
{
	// start props
	// @var CharacteristicsSetProductHistogramType $CharacteristicsSetProductHistogram
	var $CharacteristicsSetProductHistogram;
	// @var int $PageNumber
	var $PageNumber;
	// @var int $ApproximatePages
	var $ApproximatePages;
	// @var boolean $HasMore
	var $HasMore;
	// @var int $TotalProducts
	var $TotalProducts;
	// @var CatalogProductType $Product
	var $Product;
	// @var ItemArrayType $ItemArray
	var $ItemArray;
	// @var BuyingGuideDetailsType $BuyingGuideDetails
	var $BuyingGuideDetails;
	// @var boolean $DuplicateItems
	var $DuplicateItems;
	// end props

/**
 *

 * @return CharacteristicsSetProductHistogramType
 */
	function getCharacteristicsSetProductHistogram()
	{
		return $this->CharacteristicsSetProductHistogram;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCharacteristicsSetProductHistogram($value)
	{
		$this->CharacteristicsSetProductHistogram = $value;
	}
/**
 *

 * @return int
 */
	function getPageNumber()
	{
		return $this->PageNumber;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPageNumber($value)
	{
		$this->PageNumber = $value;
	}
/**
 *

 * @return int
 */
	function getApproximatePages()
	{
		return $this->ApproximatePages;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setApproximatePages($value)
	{
		$this->ApproximatePages = $value;
	}
/**
 *

 * @return boolean
 */
	function getHasMore()
	{
		return $this->HasMore;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHasMore($value)
	{
		$this->HasMore = $value;
	}
/**
 *

 * @return int
 */
	function getTotalProducts()
	{
		return $this->TotalProducts;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setTotalProducts($value)
	{
		$this->TotalProducts = $value;
	}
/**
 *

 * @return CatalogProductType
 * @param  $index 
 */
	function getProduct($index = null)
	{
		if ($index) {
		return $this->Product[$index];
	} else {
		return $this->Product;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setProduct($value, $index = null)
	{
		if ($index) {
	$this->Product[$index] = $value;
	} else {
	$this->Product = $value;
	}

	}
/**
 *

 * @return ItemArrayType
 */
	function getItemArray()
	{
		return $this->ItemArray;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemArray($value)
	{
		$this->ItemArray = $value;
	}
/**
 *

 * @return BuyingGuideDetailsType
 */
	function getBuyingGuideDetails()
	{
		return $this->BuyingGuideDetails;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setBuyingGuideDetails($value)
	{
		$this->BuyingGuideDetails = $value;
	}
/**
 *

 * @return boolean
 */
	function getDuplicateItems()
	{
		return $this->DuplicateItems;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDuplicateItems($value)
	{
		$this->DuplicateItems = $value;
	}
/**
 *

 * @return 
 */
	function GetProductsResponseType()
	{
		$this->AbstractResponseType('GetProductsResponseType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'CharacteristicsSetProductHistogram' =>
				array(
					'required' => false,
					'type' => 'CharacteristicsSetProductHistogramType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PageNumber' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ApproximatePages' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HasMore' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'TotalProducts' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Product' =>
				array(
					'required' => false,
					'type' => 'CatalogProductType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ItemArray' =>
				array(
					'required' => false,
					'type' => 'ItemArrayType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'BuyingGuideDetails' =>
				array(
					'required' => false,
					'type' => 'BuyingGuideDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DuplicateItems' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
