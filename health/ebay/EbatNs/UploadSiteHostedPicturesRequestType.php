<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'PictureUploadPolicyCodeType.php';
require_once 'Base64BinaryType.php';
require_once 'PictureSetCodeType.php';
require_once 'AbstractRequestType.php';

class UploadSiteHostedPicturesRequestType extends AbstractRequestType
{
	// start props
	// @var string $PictureName
	var $PictureName;
	// @var int $PictureSystemVersion
	var $PictureSystemVersion;
	// @var PictureSetCodeType $PictureSet
	var $PictureSet;
	// @var Base64BinaryType $PictureData
	var $PictureData;
	// @var PictureUploadPolicyCodeType $PictureUploadPolicy
	var $PictureUploadPolicy;
	// @var anyURI $ExternalPictureURL
	var $ExternalPictureURL;
	// end props

/**
 *

 * @return string
 */
	function getPictureName()
	{
		return $this->PictureName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPictureName($value)
	{
		$this->PictureName = $value;
	}
/**
 *

 * @return int
 */
	function getPictureSystemVersion()
	{
		return $this->PictureSystemVersion;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPictureSystemVersion($value)
	{
		$this->PictureSystemVersion = $value;
	}
/**
 *

 * @return PictureSetCodeType
 */
	function getPictureSet()
	{
		return $this->PictureSet;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPictureSet($value)
	{
		$this->PictureSet = $value;
	}
/**
 *

 * @return Base64BinaryType
 */
	function getPictureData()
	{
		return $this->PictureData;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPictureData($value)
	{
		$this->PictureData = $value;
	}
/**
 *

 * @return PictureUploadPolicyCodeType
 */
	function getPictureUploadPolicy()
	{
		return $this->PictureUploadPolicy;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPictureUploadPolicy($value)
	{
		$this->PictureUploadPolicy = $value;
	}
/**
 *

 * @return anyURI
 * @param  $index 
 */
	function getExternalPictureURL($index = null)
	{
		if ($index) {
		return $this->ExternalPictureURL[$index];
	} else {
		return $this->ExternalPictureURL;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setExternalPictureURL($value, $index = null)
	{
		if ($index) {
	$this->ExternalPictureURL[$index] = $value;
	} else {
	$this->ExternalPictureURL = $value;
	}

	}
/**
 *

 * @return 
 */
	function UploadSiteHostedPicturesRequestType()
	{
		$this->AbstractRequestType('UploadSiteHostedPicturesRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'PictureName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PictureSystemVersion' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PictureSet' =>
				array(
					'required' => false,
					'type' => 'PictureSetCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PictureData' =>
				array(
					'required' => false,
					'type' => 'Base64BinaryType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PictureUploadPolicy' =>
				array(
					'required' => false,
					'type' => 'PictureUploadPolicyCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalPictureURL' =>
				array(
					'required' => false,
					'type' => 'anyURI',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				)
			));

	}
}
?>
