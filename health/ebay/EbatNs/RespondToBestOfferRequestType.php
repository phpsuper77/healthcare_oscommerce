<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'BestOfferIDType.php';
require_once 'AmountType.php';
require_once 'BestOfferActionCodeType.php';
require_once 'AbstractRequestType.php';
require_once 'ItemIDType.php';

class RespondToBestOfferRequestType extends AbstractRequestType
{
	// start props
	// @var ItemIDType $ItemID
	var $ItemID;
	// @var BestOfferIDType $BestOfferID
	var $BestOfferID;
	// @var BestOfferActionCodeType $Action
	var $Action;
	// @var string $SellerResponse
	var $SellerResponse;
	// @var AmountType $CounterOfferPrice
	var $CounterOfferPrice;
	// @var int $CounterOfferQuantity
	var $CounterOfferQuantity;
	// end props

/**
 *

 * @return ItemIDType
 */
	function getItemID()
	{
		return $this->ItemID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemID($value)
	{
		$this->ItemID = $value;
	}
/**
 *

 * @return BestOfferIDType
 * @param  $index 
 */
	function getBestOfferID($index = null)
	{
		if ($index) {
		return $this->BestOfferID[$index];
	} else {
		return $this->BestOfferID;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setBestOfferID($value, $index = null)
	{
		if ($index) {
	$this->BestOfferID[$index] = $value;
	} else {
	$this->BestOfferID = $value;
	}

	}
/**
 *

 * @return BestOfferActionCodeType
 */
	function getAction()
	{
		return $this->Action;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setAction($value)
	{
		$this->Action = $value;
	}
/**
 *

 * @return string
 */
	function getSellerResponse()
	{
		return $this->SellerResponse;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSellerResponse($value)
	{
		$this->SellerResponse = $value;
	}
/**
 *

 * @return AmountType
 */
	function getCounterOfferPrice()
	{
		return $this->CounterOfferPrice;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCounterOfferPrice($value)
	{
		$this->CounterOfferPrice = $value;
	}
/**
 *

 * @return int
 */
	function getCounterOfferQuantity()
	{
		return $this->CounterOfferQuantity;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCounterOfferQuantity($value)
	{
		$this->CounterOfferQuantity = $value;
	}
/**
 *

 * @return 
 */
	function RespondToBestOfferRequestType()
	{
		$this->AbstractRequestType('RespondToBestOfferRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'ItemID' =>
				array(
					'required' => false,
					'type' => 'ItemIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'BestOfferID' =>
				array(
					'required' => false,
					'type' => 'BestOfferIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'Action' =>
				array(
					'required' => false,
					'type' => 'BestOfferActionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerResponse' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CounterOfferPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CounterOfferQuantity' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
