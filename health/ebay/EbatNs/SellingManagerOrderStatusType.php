<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'SellingManagerShippedStatusCodeType.php';
require_once 'PaymentHoldStatusCodeType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'BuyerPaymentMethodCodeType.php';
require_once 'SellingManagerPaidStatusCodeType.php';
require_once 'CommentTypeCodeType.php';
require_once 'CheckoutStatusCodeType.php';
require_once 'PaymentStatusCodeType.php';

class SellingManagerOrderStatusType extends EbatNs_ComplexType
{
	// start props
	// @var CheckoutStatusCodeType $CheckoutStatus
	var $CheckoutStatus;
	// @var SellingManagerPaidStatusCodeType $PaidStatus
	var $PaidStatus;
	// @var SellingManagerShippedStatusCodeType $ShippedStatus
	var $ShippedStatus;
	// @var PaymentStatusCodeType $eBayPaymentStatus
	var $eBayPaymentStatus;
	// @var string $PayPalTransactionID
	var $PayPalTransactionID;
	// @var BuyerPaymentMethodCodeType $PaymentMethodUsed
	var $PaymentMethodUsed;
	// @var CommentTypeCodeType $FeedbackReceived
	var $FeedbackReceived;
	// @var boolean $FeedbackSent
	var $FeedbackSent;
	// @var int $TotalEmailsSent
	var $TotalEmailsSent;
	// @var PaymentHoldStatusCodeType $PaymentHoldStatus
	var $PaymentHoldStatus;
	// @var string $SellerInvoiceNumber
	var $SellerInvoiceNumber;
	// @var dateTime $ShippedTime
	var $ShippedTime;
	// @var dateTime $PaidTime
	var $PaidTime;
	// @var dateTime $LastEmailSentTime
	var $LastEmailSentTime;
	// @var dateTime $SellerInvoiceTime
	var $SellerInvoiceTime;
	// @var boolean $IntegratedMerchantCreditCardEnabled
	var $IntegratedMerchantCreditCardEnabled;
	// end props

/**
 *

 * @return CheckoutStatusCodeType
 */
	function getCheckoutStatus()
	{
		return $this->CheckoutStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCheckoutStatus($value)
	{
		$this->CheckoutStatus = $value;
	}
/**
 *

 * @return SellingManagerPaidStatusCodeType
 */
	function getPaidStatus()
	{
		return $this->PaidStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPaidStatus($value)
	{
		$this->PaidStatus = $value;
	}
/**
 *

 * @return SellingManagerShippedStatusCodeType
 */
	function getShippedStatus()
	{
		return $this->ShippedStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setShippedStatus($value)
	{
		$this->ShippedStatus = $value;
	}
/**
 *

 * @return PaymentStatusCodeType
 */
	function getEBayPaymentStatus()
	{
		return $this->eBayPaymentStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setEBayPaymentStatus($value)
	{
		$this->eBayPaymentStatus = $value;
	}
/**
 *

 * @return string
 */
	function getPayPalTransactionID()
	{
		return $this->PayPalTransactionID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPayPalTransactionID($value)
	{
		$this->PayPalTransactionID = $value;
	}
/**
 *

 * @return BuyerPaymentMethodCodeType
 */
	function getPaymentMethodUsed()
	{
		return $this->PaymentMethodUsed;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPaymentMethodUsed($value)
	{
		$this->PaymentMethodUsed = $value;
	}
/**
 *

 * @return CommentTypeCodeType
 */
	function getFeedbackReceived()
	{
		return $this->FeedbackReceived;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFeedbackReceived($value)
	{
		$this->FeedbackReceived = $value;
	}
/**
 *

 * @return boolean
 */
	function getFeedbackSent()
	{
		return $this->FeedbackSent;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFeedbackSent($value)
	{
		$this->FeedbackSent = $value;
	}
/**
 *

 * @return int
 */
	function getTotalEmailsSent()
	{
		return $this->TotalEmailsSent;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setTotalEmailsSent($value)
	{
		$this->TotalEmailsSent = $value;
	}
/**
 *

 * @return PaymentHoldStatusCodeType
 */
	function getPaymentHoldStatus()
	{
		return $this->PaymentHoldStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPaymentHoldStatus($value)
	{
		$this->PaymentHoldStatus = $value;
	}
/**
 *

 * @return string
 */
	function getSellerInvoiceNumber()
	{
		return $this->SellerInvoiceNumber;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSellerInvoiceNumber($value)
	{
		$this->SellerInvoiceNumber = $value;
	}
/**
 *

 * @return dateTime
 */
	function getShippedTime()
	{
		return $this->ShippedTime;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setShippedTime($value)
	{
		$this->ShippedTime = $value;
	}
/**
 *

 * @return dateTime
 */
	function getPaidTime()
	{
		return $this->PaidTime;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPaidTime($value)
	{
		$this->PaidTime = $value;
	}
/**
 *

 * @return dateTime
 */
	function getLastEmailSentTime()
	{
		return $this->LastEmailSentTime;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLastEmailSentTime($value)
	{
		$this->LastEmailSentTime = $value;
	}
/**
 *

 * @return dateTime
 */
	function getSellerInvoiceTime()
	{
		return $this->SellerInvoiceTime;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSellerInvoiceTime($value)
	{
		$this->SellerInvoiceTime = $value;
	}
/**
 *

 * @return boolean
 */
	function getIntegratedMerchantCreditCardEnabled()
	{
		return $this->IntegratedMerchantCreditCardEnabled;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setIntegratedMerchantCreditCardEnabled($value)
	{
		$this->IntegratedMerchantCreditCardEnabled = $value;
	}
/**
 *

 * @return 
 */
	function SellingManagerOrderStatusType()
	{
		$this->EbatNs_ComplexType('SellingManagerOrderStatusType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'CheckoutStatus' =>
				array(
					'required' => false,
					'type' => 'CheckoutStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PaidStatus' =>
				array(
					'required' => false,
					'type' => 'SellingManagerPaidStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ShippedStatus' =>
				array(
					'required' => false,
					'type' => 'SellingManagerShippedStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'eBayPaymentStatus' =>
				array(
					'required' => false,
					'type' => 'PaymentStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PayPalTransactionID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PaymentMethodUsed' =>
				array(
					'required' => false,
					'type' => 'BuyerPaymentMethodCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'FeedbackReceived' =>
				array(
					'required' => false,
					'type' => 'CommentTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'FeedbackSent' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'TotalEmailsSent' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PaymentHoldStatus' =>
				array(
					'required' => false,
					'type' => 'PaymentHoldStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerInvoiceNumber' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ShippedTime' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PaidTime' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'LastEmailSentTime' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerInvoiceTime' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'IntegratedMerchantCreditCardEnabled' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
