<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'CharacteristicType.php';
require_once 'DataElementSetType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'CharacteristicsSearchCodeType.php';
require_once 'CharacteristicsSetType.php';

class ProductSearchPageType extends EbatNs_ComplexType
{
	// start props
	// @var CharacteristicsSetType $SearchCharacteristicsSet
	var $SearchCharacteristicsSet;
	// @var CharacteristicsSearchCodeType $SearchType
	var $SearchType;
	// @var CharacteristicType $SortCharacteristics
	var $SortCharacteristics;
	// @var DataElementSetType $DataElementSet
	var $DataElementSet;
	// end props

/**
 *

 * @return CharacteristicsSetType
 */
	function getSearchCharacteristicsSet()
	{
		return $this->SearchCharacteristicsSet;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSearchCharacteristicsSet($value)
	{
		$this->SearchCharacteristicsSet = $value;
	}
/**
 *

 * @return CharacteristicsSearchCodeType
 */
	function getSearchType()
	{
		return $this->SearchType;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSearchType($value)
	{
		$this->SearchType = $value;
	}
/**
 *

 * @return CharacteristicType
 * @param  $index 
 */
	function getSortCharacteristics($index = null)
	{
		if ($index) {
		return $this->SortCharacteristics[$index];
	} else {
		return $this->SortCharacteristics;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setSortCharacteristics($value, $index = null)
	{
		if ($index) {
	$this->SortCharacteristics[$index] = $value;
	} else {
	$this->SortCharacteristics = $value;
	}

	}
/**
 *

 * @return DataElementSetType
 * @param  $index 
 */
	function getDataElementSet($index = null)
	{
		if ($index) {
		return $this->DataElementSet[$index];
	} else {
		return $this->DataElementSet;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setDataElementSet($value, $index = null)
	{
		if ($index) {
	$this->DataElementSet[$index] = $value;
	} else {
	$this->DataElementSet = $value;
	}

	}
/**
 *

 * @return 
 */
	function ProductSearchPageType()
	{
		$this->EbatNs_ComplexType('ProductSearchPageType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'SearchCharacteristicsSet' =>
				array(
					'required' => false,
					'type' => 'CharacteristicsSetType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SearchType' =>
				array(
					'required' => false,
					'type' => 'CharacteristicsSearchCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SortCharacteristics' =>
				array(
					'required' => false,
					'type' => 'CharacteristicType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'DataElementSet' =>
				array(
					'required' => false,
					'type' => 'DataElementSetType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				)
			));

	}
}
?>
