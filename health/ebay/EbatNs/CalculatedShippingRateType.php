<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'MeasureType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'ShippingPackageCodeType.php';
require_once 'AmountType.php';
require_once 'MeasurementSystemCodeType.php';

class CalculatedShippingRateType extends EbatNs_ComplexType
{
	// start props
	// @var string $OriginatingPostalCode
	var $OriginatingPostalCode;
	// @var MeasurementSystemCodeType $MeasurementUnit
	var $MeasurementUnit;
	// @var MeasureType $PackageDepth
	var $PackageDepth;
	// @var MeasureType $PackageLength
	var $PackageLength;
	// @var MeasureType $PackageWidth
	var $PackageWidth;
	// @var AmountType $PackagingHandlingCosts
	var $PackagingHandlingCosts;
	// @var boolean $ShippingIrregular
	var $ShippingIrregular;
	// @var ShippingPackageCodeType $ShippingPackage
	var $ShippingPackage;
	// @var MeasureType $WeightMajor
	var $WeightMajor;
	// @var MeasureType $WeightMinor
	var $WeightMinor;
	// @var AmountType $InternationalPackagingHandlingCosts
	var $InternationalPackagingHandlingCosts;
	// end props

/**
 *

 * @return string
 */
	function getOriginatingPostalCode()
	{
		return $this->OriginatingPostalCode;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setOriginatingPostalCode($value)
	{
		$this->OriginatingPostalCode = $value;
	}
/**
 *

 * @return MeasurementSystemCodeType
 */
	function getMeasurementUnit()
	{
		return $this->MeasurementUnit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMeasurementUnit($value)
	{
		$this->MeasurementUnit = $value;
	}
/**
 *

 * @return MeasureType
 */
	function getPackageDepth()
	{
		return $this->PackageDepth;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPackageDepth($value)
	{
		$this->PackageDepth = $value;
	}
/**
 *

 * @return MeasureType
 */
	function getPackageLength()
	{
		return $this->PackageLength;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPackageLength($value)
	{
		$this->PackageLength = $value;
	}
/**
 *

 * @return MeasureType
 */
	function getPackageWidth()
	{
		return $this->PackageWidth;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPackageWidth($value)
	{
		$this->PackageWidth = $value;
	}
/**
 *

 * @return AmountType
 */
	function getPackagingHandlingCosts()
	{
		return $this->PackagingHandlingCosts;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPackagingHandlingCosts($value)
	{
		$this->PackagingHandlingCosts = $value;
	}
/**
 *

 * @return boolean
 */
	function getShippingIrregular()
	{
		return $this->ShippingIrregular;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setShippingIrregular($value)
	{
		$this->ShippingIrregular = $value;
	}
/**
 *

 * @return ShippingPackageCodeType
 */
	function getShippingPackage()
	{
		return $this->ShippingPackage;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setShippingPackage($value)
	{
		$this->ShippingPackage = $value;
	}
/**
 *

 * @return MeasureType
 */
	function getWeightMajor()
	{
		return $this->WeightMajor;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setWeightMajor($value)
	{
		$this->WeightMajor = $value;
	}
/**
 *

 * @return MeasureType
 */
	function getWeightMinor()
	{
		return $this->WeightMinor;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setWeightMinor($value)
	{
		$this->WeightMinor = $value;
	}
/**
 *

 * @return AmountType
 */
	function getInternationalPackagingHandlingCosts()
	{
		return $this->InternationalPackagingHandlingCosts;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setInternationalPackagingHandlingCosts($value)
	{
		$this->InternationalPackagingHandlingCosts = $value;
	}
/**
 *

 * @return 
 */
	function CalculatedShippingRateType()
	{
		$this->EbatNs_ComplexType('CalculatedShippingRateType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'OriginatingPostalCode' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MeasurementUnit' =>
				array(
					'required' => false,
					'type' => 'MeasurementSystemCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PackageDepth' =>
				array(
					'required' => false,
					'type' => 'MeasureType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PackageLength' =>
				array(
					'required' => false,
					'type' => 'MeasureType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PackageWidth' =>
				array(
					'required' => false,
					'type' => 'MeasureType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PackagingHandlingCosts' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ShippingIrregular' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ShippingPackage' =>
				array(
					'required' => false,
					'type' => 'ShippingPackageCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'WeightMajor' =>
				array(
					'required' => false,
					'type' => 'MeasureType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'WeightMinor' =>
				array(
					'required' => false,
					'type' => 'MeasureType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'InternationalPackagingHandlingCosts' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
