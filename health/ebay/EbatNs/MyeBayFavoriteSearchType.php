<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'ItemTypeCodeType.php';
require_once 'SimpleItemSortCodeType.php';
require_once 'SortOrderCodeType.php';
require_once 'SellerBusinessCodeType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'PreferredLocationCodeType.php';
require_once 'ItemConditionCodeType.php';
require_once 'PaymentMethodSearchCodeType.php';
require_once 'CurrencyCodeType.php';
require_once 'QuantityOperatorCodeType.php';
require_once 'CountryCodeType.php';
require_once 'AmountType.php';
require_once 'SearchFlagCodeType.php';

class MyeBayFavoriteSearchType extends EbatNs_ComplexType
{
	// start props
	// @var string $SearchName
	var $SearchName;
	// @var string $SearchQuery
	var $SearchQuery;
	// @var string $QueryKeywords
	var $QueryKeywords;
	// @var string $CategoryID
	var $CategoryID;
	// @var SimpleItemSortCodeType $ItemSort
	var $ItemSort;
	// @var SortOrderCodeType $SortOrder
	var $SortOrder;
	// @var dateTime $EndTimeFrom
	var $EndTimeFrom;
	// @var dateTime $EndTimeTo
	var $EndTimeTo;
	// @var int $MaxDistance
	var $MaxDistance;
	// @var string $PostalCode
	var $PostalCode;
	// @var ItemTypeCodeType $ItemType
	var $ItemType;
	// @var AmountType $PriceMax
	var $PriceMax;
	// @var AmountType $PriceMin
	var $PriceMin;
	// @var CurrencyCodeType $Currency
	var $Currency;
	// @var int $BidCountMax
	var $BidCountMax;
	// @var int $BidCountMin
	var $BidCountMin;
	// @var SearchFlagCodeType $SearchFlag
	var $SearchFlag;
	// @var PaymentMethodSearchCodeType $PaymentMethod
	var $PaymentMethod;
	// @var PreferredLocationCodeType $PreferredLocation
	var $PreferredLocation;
	// @var string $SellerID
	var $SellerID;
	// @var string $SellerIDExclude
	var $SellerIDExclude;
	// @var CountryCodeType $ItemsAvailableTo
	var $ItemsAvailableTo;
	// @var CountryCodeType $ItemsLocatedIn
	var $ItemsLocatedIn;
	// @var SellerBusinessCodeType $SellerBusinessType
	var $SellerBusinessType;
	// @var ItemConditionCodeType $Condition
	var $Condition;
	// @var int $Quantity
	var $Quantity;
	// @var QuantityOperatorCodeType $QuantityOperator
	var $QuantityOperator;
	// end props

/**
 *

 * @return string
 */
	function getSearchName()
	{
		return $this->SearchName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSearchName($value)
	{
		$this->SearchName = $value;
	}
/**
 *

 * @return string
 */
	function getSearchQuery()
	{
		return $this->SearchQuery;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSearchQuery($value)
	{
		$this->SearchQuery = $value;
	}
/**
 *

 * @return string
 */
	function getQueryKeywords()
	{
		return $this->QueryKeywords;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setQueryKeywords($value)
	{
		$this->QueryKeywords = $value;
	}
/**
 *

 * @return string
 */
	function getCategoryID()
	{
		return $this->CategoryID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCategoryID($value)
	{
		$this->CategoryID = $value;
	}
/**
 *

 * @return SimpleItemSortCodeType
 */
	function getItemSort()
	{
		return $this->ItemSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemSort($value)
	{
		$this->ItemSort = $value;
	}
/**
 *

 * @return SortOrderCodeType
 */
	function getSortOrder()
	{
		return $this->SortOrder;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSortOrder($value)
	{
		$this->SortOrder = $value;
	}
/**
 *

 * @return dateTime
 */
	function getEndTimeFrom()
	{
		return $this->EndTimeFrom;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setEndTimeFrom($value)
	{
		$this->EndTimeFrom = $value;
	}
/**
 *

 * @return dateTime
 */
	function getEndTimeTo()
	{
		return $this->EndTimeTo;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setEndTimeTo($value)
	{
		$this->EndTimeTo = $value;
	}
/**
 *

 * @return int
 */
	function getMaxDistance()
	{
		return $this->MaxDistance;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMaxDistance($value)
	{
		$this->MaxDistance = $value;
	}
/**
 *

 * @return string
 */
	function getPostalCode()
	{
		return $this->PostalCode;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPostalCode($value)
	{
		$this->PostalCode = $value;
	}
/**
 *

 * @return ItemTypeCodeType
 */
	function getItemType()
	{
		return $this->ItemType;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemType($value)
	{
		$this->ItemType = $value;
	}
/**
 *

 * @return AmountType
 */
	function getPriceMax()
	{
		return $this->PriceMax;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPriceMax($value)
	{
		$this->PriceMax = $value;
	}
/**
 *

 * @return AmountType
 */
	function getPriceMin()
	{
		return $this->PriceMin;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPriceMin($value)
	{
		$this->PriceMin = $value;
	}
/**
 *

 * @return CurrencyCodeType
 */
	function getCurrency()
	{
		return $this->Currency;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCurrency($value)
	{
		$this->Currency = $value;
	}
/**
 *

 * @return int
 */
	function getBidCountMax()
	{
		return $this->BidCountMax;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setBidCountMax($value)
	{
		$this->BidCountMax = $value;
	}
/**
 *

 * @return int
 */
	function getBidCountMin()
	{
		return $this->BidCountMin;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setBidCountMin($value)
	{
		$this->BidCountMin = $value;
	}
/**
 *

 * @return SearchFlagCodeType
 * @param  $index 
 */
	function getSearchFlag($index = null)
	{
		if ($index) {
		return $this->SearchFlag[$index];
	} else {
		return $this->SearchFlag;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setSearchFlag($value, $index = null)
	{
		if ($index) {
	$this->SearchFlag[$index] = $value;
	} else {
	$this->SearchFlag = $value;
	}

	}
/**
 *

 * @return PaymentMethodSearchCodeType
 */
	function getPaymentMethod()
	{
		return $this->PaymentMethod;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPaymentMethod($value)
	{
		$this->PaymentMethod = $value;
	}
/**
 *

 * @return PreferredLocationCodeType
 */
	function getPreferredLocation()
	{
		return $this->PreferredLocation;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPreferredLocation($value)
	{
		$this->PreferredLocation = $value;
	}
/**
 *

 * @return string
 * @param  $index 
 */
	function getSellerID($index = null)
	{
		if ($index) {
		return $this->SellerID[$index];
	} else {
		return $this->SellerID;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setSellerID($value, $index = null)
	{
		if ($index) {
	$this->SellerID[$index] = $value;
	} else {
	$this->SellerID = $value;
	}

	}
/**
 *

 * @return string
 * @param  $index 
 */
	function getSellerIDExclude($index = null)
	{
		if ($index) {
		return $this->SellerIDExclude[$index];
	} else {
		return $this->SellerIDExclude;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setSellerIDExclude($value, $index = null)
	{
		if ($index) {
	$this->SellerIDExclude[$index] = $value;
	} else {
	$this->SellerIDExclude = $value;
	}

	}
/**
 *

 * @return CountryCodeType
 */
	function getItemsAvailableTo()
	{
		return $this->ItemsAvailableTo;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemsAvailableTo($value)
	{
		$this->ItemsAvailableTo = $value;
	}
/**
 *

 * @return CountryCodeType
 */
	function getItemsLocatedIn()
	{
		return $this->ItemsLocatedIn;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemsLocatedIn($value)
	{
		$this->ItemsLocatedIn = $value;
	}
/**
 *

 * @return SellerBusinessCodeType
 */
	function getSellerBusinessType()
	{
		return $this->SellerBusinessType;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSellerBusinessType($value)
	{
		$this->SellerBusinessType = $value;
	}
/**
 *

 * @return ItemConditionCodeType
 */
	function getCondition()
	{
		return $this->Condition;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCondition($value)
	{
		$this->Condition = $value;
	}
/**
 *

 * @return int
 */
	function getQuantity()
	{
		return $this->Quantity;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setQuantity($value)
	{
		$this->Quantity = $value;
	}
/**
 *

 * @return QuantityOperatorCodeType
 */
	function getQuantityOperator()
	{
		return $this->QuantityOperator;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setQuantityOperator($value)
	{
		$this->QuantityOperator = $value;
	}
/**
 *

 * @return 
 */
	function MyeBayFavoriteSearchType()
	{
		$this->EbatNs_ComplexType('MyeBayFavoriteSearchType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'SearchName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SearchQuery' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'QueryKeywords' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CategoryID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemSort' =>
				array(
					'required' => false,
					'type' => 'SimpleItemSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SortOrder' =>
				array(
					'required' => false,
					'type' => 'SortOrderCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'EndTimeFrom' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'EndTimeTo' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxDistance' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PostalCode' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemType' =>
				array(
					'required' => false,
					'type' => 'ItemTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PriceMax' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PriceMin' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Currency' =>
				array(
					'required' => false,
					'type' => 'CurrencyCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'BidCountMax' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'BidCountMin' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SearchFlag' =>
				array(
					'required' => false,
					'type' => 'SearchFlagCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'PaymentMethod' =>
				array(
					'required' => false,
					'type' => 'PaymentMethodSearchCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PreferredLocation' =>
				array(
					'required' => false,
					'type' => 'PreferredLocationCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				),
				'SellerIDExclude' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ItemsAvailableTo' =>
				array(
					'required' => false,
					'type' => 'CountryCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemsLocatedIn' =>
				array(
					'required' => false,
					'type' => 'CountryCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerBusinessType' =>
				array(
					'required' => false,
					'type' => 'SellerBusinessCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Condition' =>
				array(
					'required' => false,
					'type' => 'ItemConditionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Quantity' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'QuantityOperator' =>
				array(
					'required' => false,
					'type' => 'QuantityOperatorCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
