<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'UserIDType.php';
require_once 'PaginationType.php';
require_once 'FeedbackTypeCodeType.php';
require_once 'CommentTypeCodeType.php';
require_once 'AbstractRequestType.php';
require_once 'ItemIDType.php';

class GetFeedbackRequestType extends AbstractRequestType
{
	// start props
	// @var UserIDType $UserID
	var $UserID;
	// @var string $FeedbackID
	var $FeedbackID;
	// @var ItemIDType $ItemID
	var $ItemID;
	// @var string $TransactionID
	var $TransactionID;
	// @var CommentTypeCodeType $CommentType
	var $CommentType;
	// @var FeedbackTypeCodeType $FeedbackType
	var $FeedbackType;
	// @var PaginationType $Pagination
	var $Pagination;
	// end props

/**
 *

 * @return UserIDType
 */
	function getUserID()
	{
		return $this->UserID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setUserID($value)
	{
		$this->UserID = $value;
	}
/**
 *

 * @return string
 */
	function getFeedbackID()
	{
		return $this->FeedbackID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFeedbackID($value)
	{
		$this->FeedbackID = $value;
	}
/**
 *

 * @return ItemIDType
 */
	function getItemID()
	{
		return $this->ItemID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemID($value)
	{
		$this->ItemID = $value;
	}
/**
 *

 * @return string
 */
	function getTransactionID()
	{
		return $this->TransactionID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setTransactionID($value)
	{
		$this->TransactionID = $value;
	}
/**
 *

 * @return CommentTypeCodeType
 * @param  $index 
 */
	function getCommentType($index = null)
	{
		if ($index) {
		return $this->CommentType[$index];
	} else {
		return $this->CommentType;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setCommentType($value, $index = null)
	{
		if ($index) {
	$this->CommentType[$index] = $value;
	} else {
	$this->CommentType = $value;
	}

	}
/**
 *

 * @return FeedbackTypeCodeType
 */
	function getFeedbackType()
	{
		return $this->FeedbackType;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFeedbackType($value)
	{
		$this->FeedbackType = $value;
	}
/**
 *

 * @return PaginationType
 */
	function getPagination()
	{
		return $this->Pagination;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPagination($value)
	{
		$this->Pagination = $value;
	}
/**
 *

 * @return 
 */
	function GetFeedbackRequestType()
	{
		$this->AbstractRequestType('GetFeedbackRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'UserID' =>
				array(
					'required' => false,
					'type' => 'UserIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'FeedbackID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemID' =>
				array(
					'required' => false,
					'type' => 'ItemIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'TransactionID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CommentType' =>
				array(
					'required' => false,
					'type' => 'CommentTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'FeedbackType' =>
				array(
					'required' => false,
					'type' => 'FeedbackTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Pagination' =>
				array(
					'required' => false,
					'type' => 'PaginationType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
