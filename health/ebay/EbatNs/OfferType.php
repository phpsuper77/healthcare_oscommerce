<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'BestOfferIDType.php';
require_once 'AmountType.php';
require_once 'ItemIDType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'UserType.php';
require_once 'BidActionCodeType.php';
require_once 'CurrencyCodeType.php';

class OfferType extends EbatNs_ComplexType
{
	// start props
	// @var BidActionCodeType $Action
	var $Action;
	// @var CurrencyCodeType $Currency
	var $Currency;
	// @var ItemIDType $ItemID
	var $ItemID;
	// @var AmountType $MaxBid
	var $MaxBid;
	// @var int $Quantity
	var $Quantity;
	// @var boolean $SecondChanceEnabled
	var $SecondChanceEnabled;
	// @var CurrencyCodeType $SiteCurrency
	var $SiteCurrency;
	// @var dateTime $TimeBid
	var $TimeBid;
	// @var AmountType $HighestBid
	var $HighestBid;
	// @var AmountType $ConvertedPrice
	var $ConvertedPrice;
	// @var string $TransactionID
	var $TransactionID;
	// @var UserType $User
	var $User;
	// @var boolean $UserConsent
	var $UserConsent;
	// @var int $BidCount
	var $BidCount;
	// @var string $Message
	var $Message;
	// @var BestOfferIDType $BestOfferID
	var $BestOfferID;
	// end props

/**
 *

 * @return BidActionCodeType
 */
	function getAction()
	{
		return $this->Action;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setAction($value)
	{
		$this->Action = $value;
	}
/**
 *

 * @return CurrencyCodeType
 */
	function getCurrency()
	{
		return $this->Currency;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCurrency($value)
	{
		$this->Currency = $value;
	}
/**
 *

 * @return ItemIDType
 */
	function getItemID()
	{
		return $this->ItemID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemID($value)
	{
		$this->ItemID = $value;
	}
/**
 *

 * @return AmountType
 */
	function getMaxBid()
	{
		return $this->MaxBid;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMaxBid($value)
	{
		$this->MaxBid = $value;
	}
/**
 *

 * @return int
 */
	function getQuantity()
	{
		return $this->Quantity;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setQuantity($value)
	{
		$this->Quantity = $value;
	}
/**
 *

 * @return boolean
 */
	function getSecondChanceEnabled()
	{
		return $this->SecondChanceEnabled;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSecondChanceEnabled($value)
	{
		$this->SecondChanceEnabled = $value;
	}
/**
 *

 * @return CurrencyCodeType
 */
	function getSiteCurrency()
	{
		return $this->SiteCurrency;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSiteCurrency($value)
	{
		$this->SiteCurrency = $value;
	}
/**
 *

 * @return dateTime
 */
	function getTimeBid()
	{
		return $this->TimeBid;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setTimeBid($value)
	{
		$this->TimeBid = $value;
	}
/**
 *

 * @return AmountType
 */
	function getHighestBid()
	{
		return $this->HighestBid;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHighestBid($value)
	{
		$this->HighestBid = $value;
	}
/**
 *

 * @return AmountType
 */
	function getConvertedPrice()
	{
		return $this->ConvertedPrice;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setConvertedPrice($value)
	{
		$this->ConvertedPrice = $value;
	}
/**
 *

 * @return string
 */
	function getTransactionID()
	{
		return $this->TransactionID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setTransactionID($value)
	{
		$this->TransactionID = $value;
	}
/**
 *

 * @return UserType
 */
	function getUser()
	{
		return $this->User;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setUser($value)
	{
		$this->User = $value;
	}
/**
 *

 * @return boolean
 */
	function getUserConsent()
	{
		return $this->UserConsent;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setUserConsent($value)
	{
		$this->UserConsent = $value;
	}
/**
 *

 * @return int
 */
	function getBidCount()
	{
		return $this->BidCount;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setBidCount($value)
	{
		$this->BidCount = $value;
	}
/**
 *

 * @return string
 */
	function getMessage()
	{
		return $this->Message;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMessage($value)
	{
		$this->Message = $value;
	}
/**
 *

 * @return BestOfferIDType
 */
	function getBestOfferID()
	{
		return $this->BestOfferID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setBestOfferID($value)
	{
		$this->BestOfferID = $value;
	}
/**
 *

 * @return 
 */
	function OfferType()
	{
		$this->EbatNs_ComplexType('OfferType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Action' =>
				array(
					'required' => false,
					'type' => 'BidActionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Currency' =>
				array(
					'required' => false,
					'type' => 'CurrencyCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemID' =>
				array(
					'required' => false,
					'type' => 'ItemIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxBid' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Quantity' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SecondChanceEnabled' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SiteCurrency' =>
				array(
					'required' => false,
					'type' => 'CurrencyCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'TimeBid' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HighestBid' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ConvertedPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'TransactionID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'User' =>
				array(
					'required' => false,
					'type' => 'UserType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'UserConsent' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'BidCount' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Message' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'BestOfferID' =>
				array(
					'required' => false,
					'type' => 'BestOfferIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
