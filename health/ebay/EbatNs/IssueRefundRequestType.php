<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'AmountType.php';
require_once 'RefundReasonCodeType.php';
require_once 'RefundTypeCodeType.php';
require_once 'AbstractRequestType.php';
require_once 'ItemIDType.php';

class IssueRefundRequestType extends AbstractRequestType
{
	// start props
	// @var ItemIDType $ItemID
	var $ItemID;
	// @var string $TransactionID
	var $TransactionID;
	// @var RefundReasonCodeType $RefundReason
	var $RefundReason;
	// @var RefundTypeCodeType $RefundType
	var $RefundType;
	// @var AmountType $RefundAmount
	var $RefundAmount;
	// @var string $RefundMessage
	var $RefundMessage;
	// end props

/**
 *

 * @return ItemIDType
 */
	function getItemID()
	{
		return $this->ItemID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemID($value)
	{
		$this->ItemID = $value;
	}
/**
 *

 * @return string
 */
	function getTransactionID()
	{
		return $this->TransactionID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setTransactionID($value)
	{
		$this->TransactionID = $value;
	}
/**
 *

 * @return RefundReasonCodeType
 */
	function getRefundReason()
	{
		return $this->RefundReason;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRefundReason($value)
	{
		$this->RefundReason = $value;
	}
/**
 *

 * @return RefundTypeCodeType
 */
	function getRefundType()
	{
		return $this->RefundType;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRefundType($value)
	{
		$this->RefundType = $value;
	}
/**
 *

 * @return AmountType
 */
	function getRefundAmount()
	{
		return $this->RefundAmount;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRefundAmount($value)
	{
		$this->RefundAmount = $value;
	}
/**
 *

 * @return string
 */
	function getRefundMessage()
	{
		return $this->RefundMessage;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRefundMessage($value)
	{
		$this->RefundMessage = $value;
	}
/**
 *

 * @return 
 */
	function IssueRefundRequestType()
	{
		$this->AbstractRequestType('IssueRefundRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'ItemID' =>
				array(
					'required' => false,
					'type' => 'ItemIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'TransactionID' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RefundReason' =>
				array(
					'required' => false,
					'type' => 'RefundReasonCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RefundType' =>
				array(
					'required' => false,
					'type' => 'RefundTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RefundAmount' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RefundMessage' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
