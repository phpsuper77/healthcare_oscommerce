<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'EbatNs_ComplexType.php';
require_once 'AccessRuleStatusCodeType.php';
require_once 'AccessRuleCurrentStatusCodeType.php';

class ApiAccessRuleType extends EbatNs_ComplexType
{
	// start props
	// @var string $CallName
	var $CallName;
	// @var boolean $CountsTowardAggregate
	var $CountsTowardAggregate;
	// @var long $DailyHardLimit
	var $DailyHardLimit;
	// @var long $DailySoftLimit
	var $DailySoftLimit;
	// @var long $DailyUsage
	var $DailyUsage;
	// @var long $HourlyHardLimit
	var $HourlyHardLimit;
	// @var long $HourlySoftLimit
	var $HourlySoftLimit;
	// @var long $HourlyUsage
	var $HourlyUsage;
	// @var int $Period
	var $Period;
	// @var long $PeriodicHardLimit
	var $PeriodicHardLimit;
	// @var long $PeriodicSoftLimit
	var $PeriodicSoftLimit;
	// @var long $PeriodicUsage
	var $PeriodicUsage;
	// @var dateTime $PeriodicStartDate
	var $PeriodicStartDate;
	// @var dateTime $ModTime
	var $ModTime;
	// @var AccessRuleCurrentStatusCodeType $RuleCurrentStatus
	var $RuleCurrentStatus;
	// @var AccessRuleStatusCodeType $RuleStatus
	var $RuleStatus;
	// end props

/**
 *

 * @return string
 */
	function getCallName()
	{
		return $this->CallName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCallName($value)
	{
		$this->CallName = $value;
	}
/**
 *

 * @return boolean
 */
	function getCountsTowardAggregate()
	{
		return $this->CountsTowardAggregate;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCountsTowardAggregate($value)
	{
		$this->CountsTowardAggregate = $value;
	}
/**
 *

 * @return long
 */
	function getDailyHardLimit()
	{
		return $this->DailyHardLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDailyHardLimit($value)
	{
		$this->DailyHardLimit = $value;
	}
/**
 *

 * @return long
 */
	function getDailySoftLimit()
	{
		return $this->DailySoftLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDailySoftLimit($value)
	{
		$this->DailySoftLimit = $value;
	}
/**
 *

 * @return long
 */
	function getDailyUsage()
	{
		return $this->DailyUsage;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDailyUsage($value)
	{
		$this->DailyUsage = $value;
	}
/**
 *

 * @return long
 */
	function getHourlyHardLimit()
	{
		return $this->HourlyHardLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHourlyHardLimit($value)
	{
		$this->HourlyHardLimit = $value;
	}
/**
 *

 * @return long
 */
	function getHourlySoftLimit()
	{
		return $this->HourlySoftLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHourlySoftLimit($value)
	{
		$this->HourlySoftLimit = $value;
	}
/**
 *

 * @return long
 */
	function getHourlyUsage()
	{
		return $this->HourlyUsage;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHourlyUsage($value)
	{
		$this->HourlyUsage = $value;
	}
/**
 *

 * @return int
 */
	function getPeriod()
	{
		return $this->Period;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPeriod($value)
	{
		$this->Period = $value;
	}
/**
 *

 * @return long
 */
	function getPeriodicHardLimit()
	{
		return $this->PeriodicHardLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPeriodicHardLimit($value)
	{
		$this->PeriodicHardLimit = $value;
	}
/**
 *

 * @return long
 */
	function getPeriodicSoftLimit()
	{
		return $this->PeriodicSoftLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPeriodicSoftLimit($value)
	{
		$this->PeriodicSoftLimit = $value;
	}
/**
 *

 * @return long
 */
	function getPeriodicUsage()
	{
		return $this->PeriodicUsage;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPeriodicUsage($value)
	{
		$this->PeriodicUsage = $value;
	}
/**
 *

 * @return dateTime
 */
	function getPeriodicStartDate()
	{
		return $this->PeriodicStartDate;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPeriodicStartDate($value)
	{
		$this->PeriodicStartDate = $value;
	}
/**
 *

 * @return dateTime
 */
	function getModTime()
	{
		return $this->ModTime;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setModTime($value)
	{
		$this->ModTime = $value;
	}
/**
 *

 * @return AccessRuleCurrentStatusCodeType
 */
	function getRuleCurrentStatus()
	{
		return $this->RuleCurrentStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRuleCurrentStatus($value)
	{
		$this->RuleCurrentStatus = $value;
	}
/**
 *

 * @return AccessRuleStatusCodeType
 */
	function getRuleStatus()
	{
		return $this->RuleStatus;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRuleStatus($value)
	{
		$this->RuleStatus = $value;
	}
/**
 *

 * @return 
 */
	function ApiAccessRuleType()
	{
		$this->EbatNs_ComplexType('ApiAccessRuleType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'CallName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'CountsTowardAggregate' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DailyHardLimit' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DailySoftLimit' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DailyUsage' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HourlyHardLimit' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HourlySoftLimit' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HourlyUsage' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Period' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PeriodicHardLimit' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PeriodicSoftLimit' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PeriodicUsage' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PeriodicStartDate' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ModTime' =>
				array(
					'required' => false,
					'type' => 'dateTime',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RuleCurrentStatus' =>
				array(
					'required' => false,
					'type' => 'AccessRuleCurrentStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RuleStatus' =>
				array(
					'required' => false,
					'type' => 'AccessRuleStatusCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
