<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'WarrantyTypeDetailsType.php';
require_once 'ReturnsWithinDetailsType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'WarrantyOfferedDetailsType.php';
require_once 'WarrantyDurationDetailsType.php';
require_once 'RefundDetailsType.php';
require_once 'ShippingCostPaidByDetailsType.php';
require_once 'ReturnsAcceptedDetailsType.php';

class ReturnPolicyDetailsType extends EbatNs_ComplexType
{
	// start props
	// @var RefundDetailsType $Refund
	var $Refund;
	// @var ReturnsWithinDetailsType $ReturnsWithin
	var $ReturnsWithin;
	// @var ReturnsAcceptedDetailsType $ReturnsAccepted
	var $ReturnsAccepted;
	// @var boolean $Description
	var $Description;
	// @var WarrantyOfferedDetailsType $WarrantyOffered
	var $WarrantyOffered;
	// @var WarrantyTypeDetailsType $WarrantyType
	var $WarrantyType;
	// @var WarrantyDurationDetailsType $WarrantyDuration
	var $WarrantyDuration;
	// @var boolean $EAN
	var $EAN;
	// @var ShippingCostPaidByDetailsType $ShippingCostPaidBy
	var $ShippingCostPaidBy;
	// end props

/**
 *

 * @return RefundDetailsType
 * @param  $index 
 */
	function getRefund($index = null)
	{
		if ($index) {
		return $this->Refund[$index];
	} else {
		return $this->Refund;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setRefund($value, $index = null)
	{
		if ($index) {
	$this->Refund[$index] = $value;
	} else {
	$this->Refund = $value;
	}

	}
/**
 *

 * @return ReturnsWithinDetailsType
 * @param  $index 
 */
	function getReturnsWithin($index = null)
	{
		if ($index) {
		return $this->ReturnsWithin[$index];
	} else {
		return $this->ReturnsWithin;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setReturnsWithin($value, $index = null)
	{
		if ($index) {
	$this->ReturnsWithin[$index] = $value;
	} else {
	$this->ReturnsWithin = $value;
	}

	}
/**
 *

 * @return ReturnsAcceptedDetailsType
 * @param  $index 
 */
	function getReturnsAccepted($index = null)
	{
		if ($index) {
		return $this->ReturnsAccepted[$index];
	} else {
		return $this->ReturnsAccepted;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setReturnsAccepted($value, $index = null)
	{
		if ($index) {
	$this->ReturnsAccepted[$index] = $value;
	} else {
	$this->ReturnsAccepted = $value;
	}

	}
/**
 *

 * @return boolean
 */
	function getDescription()
	{
		return $this->Description;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDescription($value)
	{
		$this->Description = $value;
	}
/**
 *

 * @return WarrantyOfferedDetailsType
 * @param  $index 
 */
	function getWarrantyOffered($index = null)
	{
		if ($index) {
		return $this->WarrantyOffered[$index];
	} else {
		return $this->WarrantyOffered;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setWarrantyOffered($value, $index = null)
	{
		if ($index) {
	$this->WarrantyOffered[$index] = $value;
	} else {
	$this->WarrantyOffered = $value;
	}

	}
/**
 *

 * @return WarrantyTypeDetailsType
 * @param  $index 
 */
	function getWarrantyType($index = null)
	{
		if ($index) {
		return $this->WarrantyType[$index];
	} else {
		return $this->WarrantyType;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setWarrantyType($value, $index = null)
	{
		if ($index) {
	$this->WarrantyType[$index] = $value;
	} else {
	$this->WarrantyType = $value;
	}

	}
/**
 *

 * @return WarrantyDurationDetailsType
 * @param  $index 
 */
	function getWarrantyDuration($index = null)
	{
		if ($index) {
		return $this->WarrantyDuration[$index];
	} else {
		return $this->WarrantyDuration;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setWarrantyDuration($value, $index = null)
	{
		if ($index) {
	$this->WarrantyDuration[$index] = $value;
	} else {
	$this->WarrantyDuration = $value;
	}

	}
/**
 *

 * @return boolean
 */
	function getEAN()
	{
		return $this->EAN;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setEAN($value)
	{
		$this->EAN = $value;
	}
/**
 *

 * @return ShippingCostPaidByDetailsType
 * @param  $index 
 */
	function getShippingCostPaidBy($index = null)
	{
		if ($index) {
		return $this->ShippingCostPaidBy[$index];
	} else {
		return $this->ShippingCostPaidBy;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setShippingCostPaidBy($value, $index = null)
	{
		if ($index) {
	$this->ShippingCostPaidBy[$index] = $value;
	} else {
	$this->ShippingCostPaidBy = $value;
	}

	}
/**
 *

 * @return 
 */
	function ReturnPolicyDetailsType()
	{
		$this->EbatNs_ComplexType('ReturnPolicyDetailsType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Refund' =>
				array(
					'required' => false,
					'type' => 'RefundDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ReturnsWithin' =>
				array(
					'required' => false,
					'type' => 'ReturnsWithinDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ReturnsAccepted' =>
				array(
					'required' => false,
					'type' => 'ReturnsAcceptedDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'Description' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'WarrantyOffered' =>
				array(
					'required' => false,
					'type' => 'WarrantyOfferedDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'WarrantyType' =>
				array(
					'required' => false,
					'type' => 'WarrantyTypeDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'WarrantyDuration' =>
				array(
					'required' => false,
					'type' => 'WarrantyDurationDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'EAN' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ShippingCostPaidBy' =>
				array(
					'required' => false,
					'type' => 'ShippingCostPaidByDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				)
			));

	}
}
?>
