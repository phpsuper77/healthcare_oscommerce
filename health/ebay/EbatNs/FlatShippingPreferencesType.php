<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'FlatRateInsuranceRangeCostType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'InsuranceOptionCodeType.php';
require_once 'AmountType.php';
require_once 'FlatShippingRateOptionCodeType.php';

class FlatShippingPreferencesType extends EbatNs_ComplexType
{
	// start props
	// @var AmountType $AmountPerAdditionalItem
	var $AmountPerAdditionalItem;
	// @var AmountType $DeductionAmountPerAdditionalItem
	var $DeductionAmountPerAdditionalItem;
	// @var FlatRateInsuranceRangeCostType $FlatRateInsuranceRangeCost
	var $FlatRateInsuranceRangeCost;
	// @var FlatShippingRateOptionCodeType $FlatShippingRateOption
	var $FlatShippingRateOption;
	// @var InsuranceOptionCodeType $InsuranceOption
	var $InsuranceOption;
	// end props

/**
 *

 * @return AmountType
 */
	function getAmountPerAdditionalItem()
	{
		return $this->AmountPerAdditionalItem;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setAmountPerAdditionalItem($value)
	{
		$this->AmountPerAdditionalItem = $value;
	}
/**
 *

 * @return AmountType
 */
	function getDeductionAmountPerAdditionalItem()
	{
		return $this->DeductionAmountPerAdditionalItem;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDeductionAmountPerAdditionalItem($value)
	{
		$this->DeductionAmountPerAdditionalItem = $value;
	}
/**
 *

 * @return FlatRateInsuranceRangeCostType
 * @param  $index 
 */
	function getFlatRateInsuranceRangeCost($index = null)
	{
		if ($index) {
		return $this->FlatRateInsuranceRangeCost[$index];
	} else {
		return $this->FlatRateInsuranceRangeCost;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setFlatRateInsuranceRangeCost($value, $index = null)
	{
		if ($index) {
	$this->FlatRateInsuranceRangeCost[$index] = $value;
	} else {
	$this->FlatRateInsuranceRangeCost = $value;
	}

	}
/**
 *

 * @return FlatShippingRateOptionCodeType
 */
	function getFlatShippingRateOption()
	{
		return $this->FlatShippingRateOption;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFlatShippingRateOption($value)
	{
		$this->FlatShippingRateOption = $value;
	}
/**
 *

 * @return InsuranceOptionCodeType
 */
	function getInsuranceOption()
	{
		return $this->InsuranceOption;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setInsuranceOption($value)
	{
		$this->InsuranceOption = $value;
	}
/**
 *

 * @return 
 */
	function FlatShippingPreferencesType()
	{
		$this->EbatNs_ComplexType('FlatShippingPreferencesType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'AmountPerAdditionalItem' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DeductionAmountPerAdditionalItem' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'FlatRateInsuranceRangeCost' =>
				array(
					'required' => false,
					'type' => 'FlatRateInsuranceRangeCostType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..6'
				),
				'FlatShippingRateOption' =>
				array(
					'required' => false,
					'type' => 'FlatShippingRateOptionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'InsuranceOption' =>
				array(
					'required' => false,
					'type' => 'InsuranceOptionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
