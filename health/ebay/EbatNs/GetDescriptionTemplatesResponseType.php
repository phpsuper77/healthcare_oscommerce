<?php
// autogenerated file 29.05.2009 15:17
// $Id: $
// $Log: $
//
//
require_once 'DescriptionTemplateType.php';
require_once 'ThemeGroupType.php';
require_once 'AbstractResponseType.php';

class GetDescriptionTemplatesResponseType extends AbstractResponseType
{
	// start props
	// @var DescriptionTemplateType $DescriptionTemplate
	var $DescriptionTemplate;
	// @var int $LayoutTotal
	var $LayoutTotal;
	// @var int $ObsoleteLayoutID
	var $ObsoleteLayoutID;
	// @var int $ObsoleteThemeID
	var $ObsoleteThemeID;
	// @var ThemeGroupType $ThemeGroup
	var $ThemeGroup;
	// @var int $ThemeTotal
	var $ThemeTotal;
	// end props

/**
 *

 * @return DescriptionTemplateType
 * @param  $index 
 */
	function getDescriptionTemplate($index = null)
	{
		if ($index) {
		return $this->DescriptionTemplate[$index];
	} else {
		return $this->DescriptionTemplate;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setDescriptionTemplate($value, $index = null)
	{
		if ($index) {
	$this->DescriptionTemplate[$index] = $value;
	} else {
	$this->DescriptionTemplate = $value;
	}

	}
/**
 *

 * @return int
 */
	function getLayoutTotal()
	{
		return $this->LayoutTotal;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLayoutTotal($value)
	{
		$this->LayoutTotal = $value;
	}
/**
 *

 * @return int
 * @param  $index 
 */
	function getObsoleteLayoutID($index = null)
	{
		if ($index) {
		return $this->ObsoleteLayoutID[$index];
	} else {
		return $this->ObsoleteLayoutID;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setObsoleteLayoutID($value, $index = null)
	{
		if ($index) {
	$this->ObsoleteLayoutID[$index] = $value;
	} else {
	$this->ObsoleteLayoutID = $value;
	}

	}
/**
 *

 * @return int
 * @param  $index 
 */
	function getObsoleteThemeID($index = null)
	{
		if ($index) {
		return $this->ObsoleteThemeID[$index];
	} else {
		return $this->ObsoleteThemeID;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setObsoleteThemeID($value, $index = null)
	{
		if ($index) {
	$this->ObsoleteThemeID[$index] = $value;
	} else {
	$this->ObsoleteThemeID = $value;
	}

	}
/**
 *

 * @return ThemeGroupType
 * @param  $index 
 */
	function getThemeGroup($index = null)
	{
		if ($index) {
		return $this->ThemeGroup[$index];
	} else {
		return $this->ThemeGroup;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setThemeGroup($value, $index = null)
	{
		if ($index) {
	$this->ThemeGroup[$index] = $value;
	} else {
	$this->ThemeGroup = $value;
	}

	}
/**
 *

 * @return int
 */
	function getThemeTotal()
	{
		return $this->ThemeTotal;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setThemeTotal($value)
	{
		$this->ThemeTotal = $value;
	}
/**
 *

 * @return 
 */
	function GetDescriptionTemplatesResponseType()
	{
		$this->AbstractResponseType('GetDescriptionTemplatesResponseType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'DescriptionTemplate' =>
				array(
					'required' => false,
					'type' => 'DescriptionTemplateType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'LayoutTotal' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ObsoleteLayoutID' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ObsoleteThemeID' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ThemeGroup' =>
				array(
					'required' => false,
					'type' => 'ThemeGroupType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'ThemeTotal' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
